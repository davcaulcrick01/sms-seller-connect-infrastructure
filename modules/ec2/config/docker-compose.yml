version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  # ALB Health Check Service
  health_check:
    image: python:3.11-alpine
    container_name: health_check_service
    command: sh -c "apk add --no-cache curl docker-cli && python3 /app/health-check-server.py"
    volumes:
      - ./scripts/health-check-server.py:/app/health-check-server.py:ro
      - ./scripts/health-check.sh:/app/sms-seller-connect/health-check.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8888:8888"
    networks:
      - app_network
    depends_on:
      - sms_backend
      - sms_frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - app_network
    depends_on:
      - sms_backend
      - sms_frontend
      - health_check
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/alb-health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SMS Backend API
  sms_backend:
    image: ${BACKEND_IMAGE}
    container_name: sms_backend
    # Use Docker-optimized start script (no frontend dependencies))
    command: ["/bin/bash", "/app/start_backend_simple.sh"]
    environment:
      # Database Configuration
      - USE_POSTGRES=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      
      # Twilio Configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - TWILIO_WEBHOOK_URL=https://${SMS_API_DOMAIN}/api/webhooks/sms
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.3}
      
      # Security Configuration
      - SECRET_KEY=${FLASK_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      
      # API Configuration
      - API_URL=http://sms_backend:8900
      - BACKEND_URL=http://sms_backend:8900
      - BACKEND_PORT=8900
      
      # CORS Configuration
      - ALLOWED_ORIGINS=https://${SMS_FRONTEND_DOMAIN},https://${SMS_API_DOMAIN}
      
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_DEFAULT_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      
      # SendGrid Configuration
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      
      # Application Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=info
      
      # Hot Lead Alert Configuration
      - HOT_LEAD_WEBHOOK_URL=https://${SMS_API_DOMAIN}/api/alerts
      - HOT_LEAD_EMAIL_RECIPIENTS=${HOT_LEAD_EMAIL_RECIPIENTS}
      - HOT_LEAD_SMS_RECIPIENTS=${HOT_LEAD_SMS_RECIPIENTS}
      
      # Rate Limiting
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-10}
      
      # Session Configuration
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-60}
      - REMEMBER_ME_DAYS=${REMEMBER_ME_DAYS:-30}
      
      # File Upload Configuration
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-10}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES:-pdf,jpg,jpeg,png,doc,docx,csv}
    ports:
      - "8900:8900"
    
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8900/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SMS Frontend
  sms_frontend:
    image: ${FRONTEND_IMAGE}
    container_name: sms_frontend
    environment:
      # Frontend Configuration
      - NODE_ENV=production
      - FRONTEND_PORT=8082
      - VITE_API_URL=https://${SMS_API_DOMAIN}
      - VITE_BACKEND_PORT=8900
      - REACT_APP_API_URL=https://${SMS_API_DOMAIN}
      - API_URL=https://${SMS_API_DOMAIN}
      - BACKEND_URL=https://${SMS_API_DOMAIN}
      
      # AWS Configuration (if needed by frontend)
      - AWS_REGION=${AWS_REGION}
    
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8082 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Future: Car Rental Backend (uncomment when ready)
  # carrental_backend:
  #   image: ${CARRENTAL_BACKEND_IMAGE}
  #   container_name: carrental_backend
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=${CARRENTAL_DATABASE_URL}
  #   networks:
  #     - app_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health", "||", "exit", "1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Future: Car Rental Frontend (uncomment when ready)
  # carrental_frontend:
  #   image: ${CARRENTAL_FRONTEND_IMAGE}
  #   container_name: carrental_frontend
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=https://${CARRENTAL_API_DOMAIN}
  #   networks:
  #     - app_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000", "||", "exit", "1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  app_logs:
    driver: local
    name: sms_seller_connect_logs 